name: SCL-metal

on:
  push:
      # trigger on self repo commit

  workflow_dispatch:
      # trigger via REST API (on SCL repo pull request for example)
      inputs:
          scl_ref:
              description: SCL reference to check out
              required: true

jobs:

  build:
    name: Build Metal & Unit Tests
    runs-on: ubuntu-latest
    env:
      TARGETS: qemu-sifive_e_rv64 qemu-sifive_e_rv32
      BUILD_TOTAL: 0
      BUILD_FAILURES: 0
      BUILD_WARNINGS: 0
      BUILD_ERRORS: 0

    steps:
      - uses: actions/checkout@v2
        with:
            # submodule version depends on how this workflow is triggered,
            # see below
            submodules: false

      - name: Checkout SCL and Unity submodules
        run: git submodule update --init

      - name: Select SCL revision to test
        # event-initiated request contains scl_ref, while it is not defined
        # for a push-initiated request
        run: if [ -n "${{ github.event.inputs.scl_ref }}" ]; then
             echo "${GITHUB_EVENT} ${{ github.event.inputs.scl_ref }}";
             (cd scl-metal && git checkout ${{ github.event.inputs.scl_ref }} )
             else echo "${GITHUB_EVENT}"; fi

      - name: Report submodule status
        run:  git submodule status

      - name: Fetch Docker image
        run: docker/bin/dock.sh build /bin/true

      - name: Build all targets
        run:  docker/bin/dock.sh build scripts/buildall.sh -g -r -s $TARGETS

      - name: Store build status
        run:  echo "${BUILD_FAILURES}" > build_failures

      - name: Upload test artifacts
        uses: actions/upload-artifact@v2
        with:
            name: utests
            path: build/**/*.elf

      - name: Upload build status
        uses: actions/upload-artifact@v2
        with:
            name: build_result
            path: build_failures

      - name: Report build status
        run:  echo "Build failures ${BUILD_FAILURES}/${BUILD_TOTAL}";
              echo "Build error count ${BUILD_ERRORS}";
              echo "Build warning count ${BUILD_WARNINGS}";

  utest:

    name: Run Unit Tests on QEMU
    runs-on: ubuntu-latest
    needs: build
    env:
      UTEST_TOTAL: 0
      UTEST_ABORTS: 0
      UTEST_TESTS: 0
      UTEST_FAILURES: 0
      UTEST_IGNORED: 0

    steps:
      - uses: actions/checkout@v2
        with:
            submodules: false

      - name: Fetch Docker image
        run: docker/bin/dock.sh utest /bin/true

      - name: Download test artifacts
        uses: actions/download-artifact@v2
        with:
            name: utests
            path: build

      - name: Test all targets
        run: docker/bin/dock.sh utest scripts/utestall.sh -g build

      - name: Store utest status
        run:  expr "${UTEST_ABORTS}" + "${UTEST_FAILURES}" > utest_failures

      - name: Upload utest status
        uses: actions/upload-artifact@v2
        with:
            name: utest_result
            path: utest_failures

      - name: Report unit test status
        run:  echo "Unit test fatal sessions ${UTEST_ABORTS}/${UTEST_TOTAL}";
              echo "${UTEST_TESTS} Tests ${UTEST_FAILURES} Failures ${UTEST_IGNORED} Ignored"


  status:

    name: Overall status
    runs-on: ubuntu-latest
    needs: [build, utest]

    steps:

      - name: Download build result
        uses: actions/download-artifact@v2
        with:
            name: build_result

      - name: Download utest result
        uses: actions/download-artifact@v2
        with:
            name: utest_result

      - name: Global status
        run:  BUILD_FAILURES=$(cat build_failures);
              UTEST_FAILURES=$(cat utest_failures);
              echo "Build failures ${BUILD_FAILURES}, Utest failures ${UTEST_FAILURES}";
              test -s build_failures &&
              test -s utest_failures &&
              test ${BUILD_FAILURES} -eq 0 && test ${UTEST_FAILURES} -eq 0
