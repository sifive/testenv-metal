/* Copyright 2020 SiFive, Inc */
/* SPDX-License-Identifier: Apache-2.0 */

#if __riscv_xlen == 32
.balign 128, 0
#else
.balign 256, 0
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
/* IRQ 0 can't be vectored because synchronous exceptions also have to be handled
 * by this first position of the jump table. The user-mode software interrupt
 * handler will be invoked by the exception handler, just as in the unvectored
 * case. */
        j __metal_exception_handler
IRQ_1:
        j metal_riscv_cpu_intc_default_handler
IRQ_2:
        j metal_riscv_cpu_intc_default_handler
IRQ_3:
        j metal_riscv_cpu_intc_msip_handler
IRQ_4:
        j metal_riscv_cpu_intc_default_handler
IRQ_5:
        j metal_riscv_cpu_intc_default_handler
IRQ_6:
        j metal_riscv_cpu_intc_default_handler
IRQ_7:
        j metal_riscv_cpu_intc_mtip_handler
IRQ_8:
        j metal_riscv_cpu_intc_default_handler
IRQ_9:
        j metal_riscv_cpu_intc_default_handler
IRQ_10:
        j metal_riscv_cpu_intc_default_handler
IRQ_11:
{% if global_interrupts is defined %}
        j metal_riscv_plic0_source_0_handler
{% else %}
        j metal_riscv_cpu_intc_meip_handler
{% endif %}
IRQ_12:
        j metal_riscv_cpu_intc_default_handler
IRQ_13:
        j metal_riscv_cpu_intc_default_handler
IRQ_14:
        j metal_riscv_cpu_intc_default_handler
IRQ_15:
        j metal_riscv_cpu_intc_default_handler
{% if local_interrupts is defined %}
  {% for irq in local_interrupts.irqs %}
    {% if irq.id >= 16 %}
IRQ_{{ irq.id }}:
      {% if irq.source is defined %}
        j metal_{{ to_snakecase(irq.source.compatible) }}_source_{{ irq.source.id }}_handler
      {% else %}
        j metal_{{ local_interrupts.controller }}_{{ irq.id }}_handler
      {% endif %}
    {% endif %}
  {% endfor %}
{% endif %}
{% if 'sifive,buserror0' in devices and local_interrupts.irqs|length >= 128 and local_interrupts.irqs[127].hwvectored %}
/*
 * The Bus Error Unit has a hard-coded local interrupt id of 128. Therefore,
 * when hardware-vectored local interrupts are enabled, we need to pad out
 * the jump table to put the BEU interrupt handler at the appropriate offset.
 * This wastes a ton of space, so this should only happen when HLIC-vectored
 * interrupts are requested at compile-time.
 */
{% for i in range(16 + local_interrupts.irqs|length, 128) %}
IRQ_{{ i }}:
        j metal_riscv_cpu_intc_default_handler
{% endfor %}
IRQ_128:
        j metal_sifive_buserror0_handler
{% endif %}
