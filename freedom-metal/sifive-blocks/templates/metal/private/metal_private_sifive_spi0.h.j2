/* Copyright 2020 SiFive, Inc */
/* SPDX-License-Identifier: Apache-2.0 */

#ifndef METAL__DRIVERS__SIFIVE_SPI0_H
#define METAL__DRIVERS__SIFIVE_SPI0_H

{% include 'template_comment.h.j2' %}

#include <metal/clock.h>
#include <metal/private/metal_private_spi.h>
#include <metal/gpio.h>
#include <metal/interrupt.h>
#include <metal/spi.h>
#include <metal/platform.h>
#include <stdbool.h>
#include <stddef.h>

{% if 'sifive,spi0' in devices %}
{% set sifive_spi0s = devices['sifive,spi0'] %}

static const struct dt_spi_data {
	uintptr_t base_addr;
	struct metal_clock clock;
	bool has_pinmux;
	struct metal_gpio pinmux;
	uint32_t pinmux_output_selector;
	uint32_t pinmux_source_selector;
	struct metal_interrupt interrupt_parent;
	uint32_t interrupt_id;
} dt_spi_data[__METAL_DT_NUM_SPIS] = {
	{% for spi in sifive_spi0s %}
	{
	    .base_addr = METAL_SIFIVE_SPI0_{{ spi.id }}_BASE_ADDRESS,

	{% if spi.clocks is defined %}
	    /* {{ spi.clocks[0].compatible[0] }} */
	    .clock = { {{ spi.clocks[0].id }} },
	{% endif %}

	{% if spi.pinmux is defined %}
	    /* {{ spi.pinmux[0].compatible[0] }} */
		.has_pinmux = 1,
		.pinmux = { {{ spi.pinmux[0].id }} },
		.pinmux_output_selector = {{ "0x%x" % spi.pinmux[1] }},
		.pinmux_source_selector = {{ "0x%x" % spi.pinmux[2] }},
	{% else %}
		.has_pinmux = 0,
	{% endif %}

	{% if spi.interrupt_parent is defined %}
	    /* {{ spi.interrupt_parent[0].compatible[0] }} */
		.interrupt_parent = { {{ spi.interrupt_parent[0].id }} },
		.interrupt_id = {{ spi.interrupts[0] }},
	{% endif %}
	},
	{% endfor %}
};

{% if sifive_spi0s[0].clocks is defined %}
{% set driver_string = to_snakecase(sifive_spi0s[0].clocks[0].compatible[0]) %}
{% include 'clock_dispatch.h.j2' %}
{% endif %}

{% if sifive_spi0s[0].interrupt_parent is defined %}
{% set driver_string = to_snakecase(sifive_spi0s[0].interrupt_parent[0].compatible[0]) %}
{% include 'interrupt_dispatch.h.j2' %}
{% endif %}

{% endif %}

#endif
