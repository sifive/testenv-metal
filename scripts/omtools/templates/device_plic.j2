/**
 * {{ ucomp }} registers
 * @file {{ filename }}
 *
 * @note This file has been automatically generated from the {{ucomp}} object model.
 *
 * @copyright (c) {{cyear}} SiFive, Inc
 * @copyright SPDX-License-Identifier: MIT
 */

#ifndef SIFIVE_{{ ucomp }}_H_
#define SIFIVE_{{ ucomp }}_H_

#include <stdint.h>
#include "sifive_defs.h"

/* clang-format off */

{% if dgroups %}/* {{ucomp}} properties */{% endif -%}
{%- for name, val in dgroups.items() %}
#define {{name}} {{val}}
{%- endfor %}

{% for sname, sval in sgroups.items() %}
typedef struct _{{ sname }} {
{%- for perm, type_, name, desc in sval %}
    {{perm}} {{type_}} {{name}}
{%- endfor %}
} {{ sname }}_Type;
{% endfor %}
{% for name in bgroups %}
/**
 * Structure type to access {{name}}
 */
{%- set type_, bitfield, padders = bgroups[name] %}
typedef union _{{ucomp}}_{{name}} {
    struct {
        {%- for (btype, bname, bdesc) in bitfield %}
        {{btype}} {{bname}} /**< {{bdesc}} */
        {%- endfor %}
    } b; {{padders[0]}} /**< Structure used for bit access */
{%- if not enable_assertion %}
    {{type_}} w; {{padders[1]}} /**< Structure used for word access */
{%- endif %}
} {{ucomp}}_{{name}}_Type;
{% if enable_assertion %}
/* Assert the size of generated {{ucomp}}_{{name}} bitfield is valid */
ASSERT_COMPILE(sizeof({{ucomp}}_{{name}}_Type) == sizeof(uint{{tgroups[name]}}_t));
{% endif -%}

{%- set bfgroup, _ = fgroups[name] %}
{%- for field in bfgroup %}
/* {{ucomp}} {{name}} */
        {%- for fname, fvalue, _ in field %}
#define {{fname}} {{fvalue}}
        {%- endfor %}
{% endfor %}

{%- endfor %}
#endif /* SIFIVE_{{ ucomp }}_H_ */
